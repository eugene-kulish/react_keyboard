{"version":3,"sources":["AppAsFC/AppAsFC.tsx","App.tsx","index.tsx"],"names":["AppAsFC","useState","key","setKey","useEffect","handleDocumentKeyPress","event","document","addEventListener","removeEventListener","className","App","state","setState","this","React","Component","ReactDOM","render","getElementById"],"mappings":"2NAEaA,EAAoB,WAC/B,MAAsBC,mBAAS,IAA/B,mBAAOC,EAAP,KAAYC,EAAZ,KAcA,OAZAC,qBAAU,WACR,IAAMC,EAAyB,SAACC,GAC9BH,EAAOG,EAAMJ,MAKf,OAFAK,SAASC,iBAAiB,QAASH,GAE5B,WACLE,SAASE,oBAAoB,QAASJ,MAEvC,IAGD,mCACE,qBAAKK,UAAU,MAAf,SACE,mBAAGA,UAAU,eAAb,SACY,KAARR,EAAD,mCACgCA,EADhC,KAEI,iCCnBFS,EAAb,4MACEC,MAAQ,CACNV,IAAK,IAFT,EAaEG,uBAAyB,SAACC,GACxB,EAAKO,SAAS,CAAEX,IAAKI,EAAMJ,OAd/B,uDAKE,WACEK,SAASC,iBAAiB,QAASM,KAAKT,0BAN5C,kCASE,WACEE,SAASE,oBAAoB,QAASK,KAAKT,0BAV/C,oBAiBE,WACE,OACE,qCACE,qBAAKK,UAAU,MAAf,SACE,mBAAGA,UAAU,eAAb,SACuB,KAAnBI,KAAKF,MAAMV,IAAZ,mCACgCY,KAAKF,MAAMV,IAD3C,KAEI,8BAIT,cAAC,EAAD,WA5BR,GAAyBa,IAAMC,W,MCC/BC,IAASC,OACP,cAAC,EAAD,IACAX,SAASY,eAAe,W","file":"static/js/main.5bd32d65.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nexport const AppAsFC: React.FC = () => {\n  const [key, setKey] = useState('');\n\n  useEffect(() => {\n    const handleDocumentKeyPress = (event: KeyboardEvent) => {\n      setKey(event.key);\n    };\n\n    document.addEventListener('keyup', handleDocumentKeyPress);\n\n    return () => {\n      document.removeEventListener('keyup', handleDocumentKeyPress);\n    };\n  }, []);\n\n  return (\n    <>\n      <div className=\"App\">\n        <p className=\"App__message\">\n          {(key !== '')\n            ? (`The last pressed key is [${key}]`)\n            : ('Nothing was pressed yet')}\n        </p>\n      </div>\n    </>\n  );\n};\n","import React from 'react';\n\nimport { AppAsFC } from './AppAsFC/AppAsFC';\n\nexport class App extends React.Component {\n  state = {\n    key: '',\n  };\n\n  componentDidMount(): void {\n    document.addEventListener('keyup', this.handleDocumentKeyPress);\n  }\n\n  componentWillUnmount(): void {\n    document.removeEventListener('keyup', this.handleDocumentKeyPress);\n  }\n\n  handleDocumentKeyPress = (event: KeyboardEvent) => {\n    this.setState({ key: event.key });\n  };\n\n  render() {\n    return (\n      <>\n        <div className=\"App\">\n          <p className=\"App__message\">\n            {(this.state.key !== '')\n              ? (`The last pressed key is [${this.state.key}]`)\n              : ('Nothing was pressed yet')}\n          </p>\n        </div>\n\n        <AppAsFC />\n      </>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nimport './index.scss';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}